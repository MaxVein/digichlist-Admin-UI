[{"D:\\Softserve\\digichlist-Admin-UI\\src\\index.tsx":"1","D:\\Softserve\\digichlist-Admin-UI\\src\\reportWebVitals.ts":"2","D:\\Softserve\\digichlist-Admin-UI\\src\\App.tsx":"3","D:\\Softserve\\digichlist-Admin-UI\\src\\common\\guards\\ProtectedRoute.tsx":"4","D:\\Softserve\\digichlist-Admin-UI\\src\\features\\login\\admin\\Dashboard.tsx":"5","D:\\Softserve\\digichlist-Admin-UI\\src\\features\\login\\index.js":"6","D:\\Softserve\\digichlist-Admin-UI\\src\\features\\login\\Login.tsx":"7","D:\\Softserve\\digichlist-Admin-UI\\src\\common\\guards\\LoginRoute.tsx":"8","D:\\Softserve\\digichlist-Admin-UI\\src\\common\\utils\\api.tsx":"9","D:\\Softserve\\digichlist-Admin-UI\\src\\environments\\environment.tsx":"10","D:\\Softserve\\digichlist-Admin-UI\\src\\common\\components\\Snackbar\\snackbar.js":"11"},{"size":573,"mtime":1611353701703,"results":"12","hashOfConfig":"13"},{"size":482,"mtime":1611352020753,"results":"14","hashOfConfig":"13"},{"size":1309,"mtime":1611426434440,"results":"15","hashOfConfig":"13"},{"size":771,"mtime":1611402309848,"results":"16","hashOfConfig":"13"},{"size":1360,"mtime":1611427770437,"results":"17","hashOfConfig":"13"},{"size":50,"mtime":1611354979053,"results":"18","hashOfConfig":"13"},{"size":4862,"mtime":1611426402027,"results":"19","hashOfConfig":"13"},{"size":786,"mtime":1611402862414,"results":"20","hashOfConfig":"13"},{"size":1198,"mtime":1611430102514,"results":"21","hashOfConfig":"13"},{"size":102,"mtime":1611399045877,"results":"22","hashOfConfig":"13"},{"size":661,"mtime":1611423394339,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"m9axgr",{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"26"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"41"},"D:\\Softserve\\digichlist-Admin-UI\\src\\index.tsx",[],[],"D:\\Softserve\\digichlist-Admin-UI\\src\\reportWebVitals.ts",["55"],"import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n            getCLS(onPerfEntry);\r\n            getFID(onPerfEntry);\r\n            getFCP(onPerfEntry);\r\n            getLCP(onPerfEntry);\r\n            getTTFB(onPerfEntry);\r\n        });\r\n    }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","D:\\Softserve\\digichlist-Admin-UI\\src\\App.tsx",["56"],"import React, {useState, useEffect} from 'react';\r\nimport Login from './features/login';\r\nimport Dashboard from './features/login/admin/Dashboard';\r\nimport LoginRoute from './common/guards/LoginRoute'\r\nimport { digichServise } from './/common/utils/api';\r\n\r\nimport ProtectedRoute from './common/guards/ProtectedRoute'\r\nimport { Redirect, Route, Switch } from 'react-router-dom';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n    const [authInfo, setAuthInfo] = useState(false);\r\n    const dService = new digichServise();\r\n    useEffect(() => {\r\n        async function isAuth() {\r\n            const res = await dService.isLogged();\r\n            setAuthInfo(res);\r\n        }\r\n        isAuth();\r\n    }, []);\r\n    return (\r\n        <Switch>\r\n        <Redirect path=\"/\" to=\"/login\" component={Login} exact />\r\n        <Redirect path=\"/admin\" exact to=\"/admin/dashboard\" />\r\n        <ProtectedRoute\r\n            authInfo={authInfo}\r\n            setAuthInfo={setAuthInfo}\r\n            path=\"/admin\"\r\n            component={Dashboard}\r\n        />\r\n        <LoginRoute\r\n            setAuthInfo={setAuthInfo}\r\n            authInfo={authInfo}\r\n            path=\"/login\"\r\n            component={Login}\r\n        />\r\n        <Route path=\"*\" component={() => <h1>404</h1>} />\r\n\r\n    </Switch>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","D:\\Softserve\\digichlist-Admin-UI\\src\\common\\guards\\ProtectedRoute.tsx",["57","58"],"import React from 'react';\nimport { Redirect, Route } from 'react-router-dom';\nconst ProtectedRoute = ({ component: Component, path, authInfo, setAuthInfo }) => {\n    return (\n        <Route\n            render={(props) => {\n                if (authInfo) {\n                        return <Component setAuthInfo={setAuthInfo} path={path} {...props} />;\n                }\n                else {\n                    return (\n                        <Redirect\n                            to={{\n                                pathname: '/login',\n                                state: { from: props.location },\n                            }}\n                        />\n                    );\n                }\n            }}\n        />\n    );\n};\nexport default ProtectedRoute;","D:\\Softserve\\digichlist-Admin-UI\\src\\features\\login\\admin\\Dashboard.tsx",["59","60"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nimport { digichServise } from './../../../common/utils/api';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      flexGrow: 1,\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n    },\n  }));\nconst Dashboard = ({ setAuthInfo }) => {\n    const classes = useStyles();\n    const dService = new digichServise();\n    const logoutHandler = () =>{\n      dService.logOut();\n        setAuthInfo(false);\n     }\n    return (\n        <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n           Digichlist\n          </Typography>\n          <Button color=\"inherit\" onClick={logoutHandler}>Logout</Button>\n        </Toolbar>\n      </AppBar>\n    </div>\n    );\n};\nexport default Dashboard;","D:\\Softserve\\digichlist-Admin-UI\\src\\features\\login\\index.js",[],[],"D:\\Softserve\\digichlist-Admin-UI\\src\\features\\login\\Login.tsx",["61","62","63"],"import React, { useEffect, useState } from 'react';\n\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport { digichServise } from './../../common/utils/api';\nimport SnackbarHandler  from './../../common/components/Snackbar/snackbar';\n\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        marginTop: theme.spacing(8),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main,\n    },\n    form: {\n        width: '100%',\n        marginTop: theme.spacing(1),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n    logo: {\n        backgroundColor: '#fafafa',\n    },\n}));\n\nconst Login = ({ setAuthInfo }) => {\n    const [snack, setSnack] = useState({ open: false, message: '', type: 'success' });\n    const dService = new digichServise();\n    const classes = useStyles();\n\n    const initialValues = {\n        name: '',\n        password: '',\n    };\n    const validationSchema = Yup.object({\n        name: Yup.string().required(`Обов'язкове поле`),\n        password: Yup.string().required(`Обов'язкове поле`),\n    });\n    const submitHandler = async (value) => {\n        const logInfo = { email: value.name, password: value.password };\n        const response = await dService.login(logInfo);\n        if (response.err){\n            setSnack({\n                open: true,\n                message: 'Неправильний логін або пароль',\n                type: 'error',\n            });\n        }\n        const isAuth = await dService.isLogged();\n        setAuthInfo(isAuth);\n    };\n\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            <CssBaseline />\n            <div className={classes.paper}>\n                <Typography component=\"h1\" variant=\"h5\">\n                    Log in\n                </Typography>\n                <Formik\n                    initialValues={initialValues}\n                    validationSchema={validationSchema}\n                    onSubmit={submitHandler}\n                    validateOnMount={true}\n                >\n                    {(props) => (\n                        <form className={classes.form} noValidate onSubmit={props.handleSubmit}>\n                            <TextField\n                                variant=\"outlined\"\n                                margin=\"normal\"\n                                required\n                                fullWidth\n                                id=\"name\"\n                                label=\"Name\"\n                                name=\"name\"\n                                value={props.values.name}\n                                onBlur={props.handleBlur}\n                                onChange={props.handleChange}\n                                helperText={props.touched.name ? props.errors.name : ''}\n                                error={props.touched.name && Boolean(props.errors.name)}\n                            />\n\n                            <TextField\n                                variant=\"outlined\"\n                                margin=\"normal\"\n                                required\n                                fullWidth\n                                name=\"password\"\n                                label=\"Password\"\n                                type=\"password\"\n                                id=\"password\"\n                                onBlur={props.handleBlur}\n                                value={props.values.password}\n                                onChange={props.handleChange}\n                                helperText={props.touched.password ? props.errors.password : ''}\n                                error={props.touched.password && Boolean(props.errors.password)}\n                            />\n\n                            <Button\n                                disabled={!props.isValid}\n                                type=\"submit\"\n                                fullWidth\n                                variant=\"contained\"\n                                color=\"primary\"\n                                className={classes.submit}\n                            >\n                                Log In\n                            </Button>\n                        </form>\n                    )}\n                </Formik>\n            </div>\n            <SnackbarHandler snack={snack} setSnack={setSnack} />\n        </Container>\n    );\n};\nexport default Login;","D:\\Softserve\\digichlist-Admin-UI\\src\\common\\guards\\LoginRoute.tsx",["64","65"],"import React from 'react';\nimport { Redirect, Route } from 'react-router-dom';\nconst LoginRoute = ({ component: Component, path, authInfo, setAuthInfo }) => {\n    return (\n        <Route\n            render={(props) => {\n                if (!authInfo) {\n                    return <Component setAuthInfo={setAuthInfo} path={path} {...props} />;\n                } else {\n                        return (\n                            <Redirect\n                                to={{\n                                    pathname: '/admin/dashboard',\n                                    state: { from: props.location },\n                                }}\n                            />\n                        );\n                }\n            }}\n        />\n    );\n};\nexport default LoginRoute;","D:\\Softserve\\digichlist-Admin-UI\\src\\common\\utils\\api.tsx",["66","67","68","69","70"],"D:\\Softserve\\digichlist-Admin-UI\\src\\environments\\environment.tsx",[],"D:\\Softserve\\digichlist-Admin-UI\\src\\common\\components\\Snackbar\\snackbar.js",["71","72"],"import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Alert from '@material-ui/lab/Alert';\r\n\r\nexport const messages = [];\r\n\r\nexport default function SnackbarHandler({ snack, setSnack }) {\r\n    const closeSnack = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setSnack({ open: false });\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={snack.open} autoHideDuration={3000} onClose={closeSnack}>\r\n            <Alert elevation={4} variant=\"filled\" onClose={closeSnack} severity={snack.type}>\r\n                {snack.message}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}",{"ruleId":"73","severity":1,"message":"74","line":3,"column":25,"nodeType":"75","messageId":"76","endLine":3,"endColumn":57},{"ruleId":"73","severity":1,"message":"74","line":11,"column":1,"nodeType":"77","messageId":"76","endLine":11,"endColumn":15},{"ruleId":"73","severity":1,"message":"74","line":3,"column":24,"nodeType":"75","messageId":"76","endLine":3,"endColumn":82},{"ruleId":"73","severity":1,"message":"78","line":3,"column":25,"nodeType":"79","messageId":"80","endLine":3,"endColumn":78},{"ruleId":"73","severity":1,"message":"74","line":23,"column":19,"nodeType":"75","messageId":"76","endLine":23,"endColumn":39},{"ruleId":"73","severity":1,"message":"78","line":23,"column":20,"nodeType":"79","messageId":"80","endLine":23,"endColumn":35},{"ruleId":"81","severity":1,"message":"82","line":1,"column":17,"nodeType":"83","messageId":"84","endLine":1,"endColumn":26},{"ruleId":"73","severity":1,"message":"74","line":37,"column":15,"nodeType":"75","messageId":"76","endLine":37,"endColumn":35},{"ruleId":"73","severity":1,"message":"78","line":37,"column":16,"nodeType":"79","messageId":"80","endLine":37,"endColumn":31},{"ruleId":"73","severity":1,"message":"74","line":3,"column":20,"nodeType":"75","messageId":"76","endLine":3,"endColumn":78},{"ruleId":"73","severity":1,"message":"78","line":3,"column":21,"nodeType":"79","messageId":"80","endLine":3,"endColumn":74},{"ruleId":"73","severity":1,"message":"74","line":11,"column":5,"nodeType":"85","messageId":"76","endLine":11,"endColumn":22},{"ruleId":"73","severity":1,"message":"86","line":11,"column":17,"nodeType":"83","messageId":"87","endLine":11,"endColumn":21},{"ruleId":"73","severity":1,"message":"74","line":28,"column":5,"nodeType":"85","messageId":"76","endLine":28,"endColumn":13},{"ruleId":"73","severity":1,"message":"74","line":32,"column":5,"nodeType":"85","messageId":"76","endLine":32,"endColumn":27},{"ruleId":"73","severity":1,"message":"74","line":35,"column":5,"nodeType":"85","messageId":"76","endLine":35,"endColumn":15},{"ruleId":"73","severity":1,"message":"74","line":7,"column":16,"nodeType":"77","messageId":"76","endLine":7,"endColumn":61},{"ruleId":"73","severity":1,"message":"78","line":7,"column":41,"nodeType":"79","messageId":"80","endLine":7,"endColumn":60},"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","FunctionDeclaration","Object pattern argument should be typed.","ObjectPattern","missingArgTypeUnnamed","@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","FunctionExpression","Argument 'body' should be typed.","missingArgType"]