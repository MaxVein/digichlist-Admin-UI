[{"D:\\Softserve\\digichlist-Admin-UI\\src\\index.tsx":"1","D:\\Softserve\\digichlist-Admin-UI\\src\\reportWebVitals.ts":"2","D:\\Softserve\\digichlist-Admin-UI\\src\\App.tsx":"3","D:\\Softserve\\digichlist-Admin-UI\\src\\common\\utils\\api.tsx":"4","D:\\Softserve\\digichlist-Admin-UI\\src\\common\\guards\\LoginRoute.tsx":"5","D:\\Softserve\\digichlist-Admin-UI\\src\\common\\guards\\ProtectedRoute.tsx":"6","D:\\Softserve\\digichlist-Admin-UI\\src\\features\\login\\index.js":"7","D:\\Softserve\\digichlist-Admin-UI\\src\\environments\\environment.tsx":"8","D:\\Softserve\\digichlist-Admin-UI\\src\\features\\login\\Login.tsx":"9","D:\\Softserve\\digichlist-Admin-UI\\src\\common\\components\\Snackbar\\snackbar.js":"10","D:\\Softserve\\digichlist-Admin-UI\\src\\features\\login\\admin\\AdminNavItem.tsx":"11","D:\\Softserve\\digichlist-Admin-UI\\src\\features\\login\\admin\\nav.tsx":"12","D:\\Softserve\\digichlist-Admin-UI\\src\\features\\login\\admin\\AdminPanel.tsx":"13"},{"size":573,"mtime":1611431841842,"results":"14","hashOfConfig":"15"},{"size":482,"mtime":1611430781593,"results":"16","hashOfConfig":"15"},{"size":1391,"mtime":1611507815590,"results":"17","hashOfConfig":"15"},{"size":934,"mtime":1611484865525,"results":"18","hashOfConfig":"15"},{"size":791,"mtime":1611431841813,"results":"19","hashOfConfig":"15"},{"size":775,"mtime":1611431841816,"results":"20","hashOfConfig":"15"},{"size":53,"mtime":1611431841838,"results":"21","hashOfConfig":"15"},{"size":102,"mtime":1611431841826,"results":"22","hashOfConfig":"15"},{"size":4956,"mtime":1611431841831,"results":"23","hashOfConfig":"15"},{"size":663,"mtime":1611431841810,"results":"24","hashOfConfig":"15"},{"size":1086,"mtime":1611507126522,"results":"25","hashOfConfig":"15"},{"size":766,"mtime":1611507659854,"results":"26","hashOfConfig":"15"},{"size":4962,"mtime":1611507800916,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"m9axgr",{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"30"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"30"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"30"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\Softserve\\digichlist-Admin-UI\\src\\index.tsx",[],[],"D:\\Softserve\\digichlist-Admin-UI\\src\\reportWebVitals.ts",["65"],"import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n            getCLS(onPerfEntry);\r\n            getFID(onPerfEntry);\r\n            getFCP(onPerfEntry);\r\n            getLCP(onPerfEntry);\r\n            getTTFB(onPerfEntry);\r\n        });\r\n    }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","D:\\Softserve\\digichlist-Admin-UI\\src\\App.tsx",[],"D:\\Softserve\\digichlist-Admin-UI\\src\\common\\utils\\api.tsx",["66","67","68","69"],"import axios from 'axios';\r\nimport { environment } from '../../environments/environment';\r\n\r\nexport class digichServise {\r\n    private telegramApiAxios;\r\n    baseURL = `${environment.BASEURL}`;\r\n    async login(body) {\r\n        try {\r\n            const response = await axios.post(`${environment.BASEURL}authorization/login`, body);\r\n            sessionStorage.setItem('secret-auth-token', response.data.token);\r\n            this.telegramApiAxios = axios.create({\r\n                baseURL: this.baseURL,\r\n                headers: {\r\n                    Authorization: sessionStorage.getItem('secret-auth-token'),\r\n                },\r\n            });\r\n            return response.data;\r\n        } catch (err) {\r\n            return { err: err };\r\n        }\r\n    }\r\n    logOut() {\r\n        sessionStorage.removeItem('secret-auth-token');\r\n    }\r\n    isLogged() {\r\n        return !!sessionStorage.getItem('secret-auth-token');\r\n    }\r\n}\r\n","D:\\Softserve\\digichlist-Admin-UI\\src\\common\\guards\\LoginRoute.tsx",["70"],"import React from 'react';\r\nimport { Redirect, Route } from 'react-router-dom';\r\nconst LoginRoute = ({ component: Component, path, authInfo, setAuthInfo }): JSX.Element => {\r\n    return (\r\n        <Route\r\n            render={(props) => {\r\n                if (!authInfo) {\r\n                    return <Component setAuthInfo={setAuthInfo} path={path} {...props} />;\r\n                } else {\r\n                    return (\r\n                        <Redirect\r\n                            to={{\r\n                                pathname: '/admin/dashboard',\r\n                                state: { from: props.location },\r\n                            }}\r\n                        />\r\n                    );\r\n                }\r\n            }}\r\n        />\r\n    );\r\n};\r\nexport default LoginRoute;\r\n","D:\\Softserve\\digichlist-Admin-UI\\src\\common\\guards\\ProtectedRoute.tsx",["71","72"],"import React from 'react';\r\nimport { Redirect, Route } from 'react-router-dom';\r\nconst ProtectedRoute = ({ component: Component, path, authInfo, setAuthInfo }) => {\r\n    return (\r\n        <Route\r\n            render={(props) => {\r\n                if (authInfo) {\r\n                    return <Component setAuthInfo={setAuthInfo} path={path} {...props} />;\r\n                } else {\r\n                    return (\r\n                        <Redirect\r\n                            to={{\r\n                                pathname: '/login',\r\n                                state: { from: props.location },\r\n                            }}\r\n                        />\r\n                    );\r\n                }\r\n            }}\r\n        />\r\n    );\r\n};\r\nexport default ProtectedRoute;\r\n","D:\\Softserve\\digichlist-Admin-UI\\src\\features\\login\\index.js",[],[],"D:\\Softserve\\digichlist-Admin-UI\\src\\environments\\environment.tsx",[],"D:\\Softserve\\digichlist-Admin-UI\\src\\features\\login\\Login.tsx",["73","74"],"import React, { useEffect, useState } from 'react';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { digichServise } from './../../common/utils/api';\r\nimport SnackbarHandler from './../../common/components/Snackbar/snackbar';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%',\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    logo: {\r\n        backgroundColor: '#fafafa',\r\n    },\r\n}));\r\n\r\nconst Login = ({ setAuthInfo }): JSX.Element => {\r\n    const [snack, setSnack] = useState({ open: false, message: '', type: 'success' });\r\n    const dService = new digichServise();\r\n    const classes = useStyles();\r\n\r\n    const initialValues = {\r\n        name: '',\r\n        password: '',\r\n    };\r\n    const validationSchema = Yup.object({\r\n        name: Yup.string().required(`Обов'язкове поле`),\r\n        password: Yup.string().required(`Обов'язкове поле`),\r\n    });\r\n    const submitHandler = async (value) => {\r\n        const logInfo = { email: value.name, password: value.password };\r\n        const response = await dService.login(logInfo);\r\n        if (response.err) {\r\n            setSnack({\r\n                open: true,\r\n                message: 'Неправильний логін або пароль',\r\n                type: 'error',\r\n            });\r\n        }\r\n        const isAuth = await dService.isLogged();\r\n        setAuthInfo(isAuth);\r\n    };\r\n\r\n    return (\r\n        <Container component='main' maxWidth='xs'>\r\n            <CssBaseline />\r\n            <div className={classes.paper}>\r\n                <Typography component='h1' variant='h5'>\r\n                    Log in\r\n                </Typography>\r\n                <Formik\r\n                    initialValues={initialValues}\r\n                    validationSchema={validationSchema}\r\n                    onSubmit={submitHandler}\r\n                    validateOnMount={true}>\r\n                    {(props) => (\r\n                        <form className={classes.form} noValidate onSubmit={props.handleSubmit}>\r\n                            <TextField\r\n                                variant='outlined'\r\n                                margin='normal'\r\n                                required\r\n                                fullWidth\r\n                                id='name'\r\n                                label='Name'\r\n                                name='name'\r\n                                value={props.values.name}\r\n                                onBlur={props.handleBlur}\r\n                                onChange={props.handleChange}\r\n                                helperText={props.touched.name ? props.errors.name : ''}\r\n                                error={props.touched.name && Boolean(props.errors.name)}\r\n                            />\r\n\r\n                            <TextField\r\n                                variant='outlined'\r\n                                margin='normal'\r\n                                required\r\n                                fullWidth\r\n                                name='password'\r\n                                label='Password'\r\n                                type='password'\r\n                                id='password'\r\n                                onBlur={props.handleBlur}\r\n                                value={props.values.password}\r\n                                onChange={props.handleChange}\r\n                                helperText={props.touched.password ? props.errors.password : ''}\r\n                                error={props.touched.password && Boolean(props.errors.password)}\r\n                            />\r\n\r\n                            <Button\r\n                                disabled={!props.isValid}\r\n                                type='submit'\r\n                                fullWidth\r\n                                variant='contained'\r\n                                color='primary'\r\n                                className={classes.submit}>\r\n                                Log In\r\n                            </Button>\r\n                        </form>\r\n                    )}\r\n                </Formik>\r\n            </div>\r\n            <SnackbarHandler snack={snack} setSnack={setSnack} />\r\n        </Container>\r\n    );\r\n};\r\nexport default Login;\r\n","D:\\Softserve\\digichlist-Admin-UI\\src\\common\\components\\Snackbar\\snackbar.js",["75","76"],"import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Alert from '@material-ui/lab/Alert';\r\n\r\nexport const messages = [];\r\n\r\nexport default function SnackbarHandler({ snack, setSnack }) {\r\n    const closeSnack = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setSnack({ open: false });\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={snack.open} autoHideDuration={3000} onClose={closeSnack}>\r\n            <Alert elevation={4} variant='filled' onClose={closeSnack} severity={snack.type}>\r\n                {snack.message}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n",[],"D:\\Softserve\\digichlist-Admin-UI\\src\\features\\login\\admin\\AdminNavItem.tsx",["77","78"],"import React from 'react';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { NavLink } from 'react-router-dom';\n\nconst useStyles = makeStyles((theme) => ({\n    itemText: {\n        fontSize: '1rem',\n    },\n    active: {\n        color: 'white',\n        fontWeight: 500,\n        backgroundColor: theme.palette.primary.main,\n        '& svg': {\n            color: 'white',\n        },\n    },\n}));\n\nexport const MainListItems = ({ path, icon, title }) => {\n    const classes = useStyles();\n    return (\n        <ListItem\n            component={NavLink}\n            to={path}\n            exact\n            activeClassName={classes.active}\n        >\n            <ListItemIcon>{icon}</ListItemIcon>\n            <ListItemText\n                disableTypography\n                className={classes.itemText}\n                color=\"primary\"\n                primary={title}\n            />\n        </ListItem>\n    );\n};","D:\\Softserve\\digichlist-Admin-UI\\src\\features\\login\\admin\\nav.tsx",["79","80","81","82","83"],"import React from 'react';\nimport {\n    AccountBalance,\n    CollectionsBookmark,\n    Dashboard,\n    Dns,\n    Group,\n    InsertChartSharp,\n    SupervisedUserCircle,\n    List,\n} from '@material-ui/icons';\n\nexport const navList:any = [\n        {\n            path: '/admin/dashboard',\n            icon: <Dashboard />,\n            title: 'Головна',\n        },\n        {\n            path: '/admin/admins',\n            icon: <SupervisedUserCircle />,\n            title: 'Адміни',\n        },\n        {\n            path: '/admin/users',\n            icon: <Group />,\n            title: 'Користувачі',\n        },\n        {\n            path: '/admin/defects',\n            icon: <InsertChartSharp />,\n            title: 'Дефекти',\n        },\n    ];","D:\\Softserve\\digichlist-Admin-UI\\src\\features\\login\\admin\\AdminPanel.tsx",["84","85","86","87","88","89","90"],{"ruleId":"91","severity":1,"message":"92","line":3,"column":25,"nodeType":"93","messageId":"94","endLine":3,"endColumn":57},{"ruleId":"91","severity":1,"message":"92","line":7,"column":5,"nodeType":"95","messageId":"94","endLine":7,"endColumn":22},{"ruleId":"91","severity":1,"message":"96","line":7,"column":17,"nodeType":"97","messageId":"98","endLine":7,"endColumn":21},{"ruleId":"91","severity":1,"message":"92","line":22,"column":5,"nodeType":"95","messageId":"94","endLine":22,"endColumn":13},{"ruleId":"91","severity":1,"message":"92","line":25,"column":5,"nodeType":"95","messageId":"94","endLine":25,"endColumn":15},{"ruleId":"91","severity":1,"message":"99","line":3,"column":21,"nodeType":"100","messageId":"101","endLine":3,"endColumn":74},{"ruleId":"91","severity":1,"message":"92","line":3,"column":24,"nodeType":"93","messageId":"94","endLine":3,"endColumn":82},{"ruleId":"91","severity":1,"message":"99","line":3,"column":25,"nodeType":"100","messageId":"101","endLine":3,"endColumn":78},{"ruleId":"102","severity":1,"message":"103","line":1,"column":17,"nodeType":"97","messageId":"104","endLine":1,"endColumn":26},{"ruleId":"91","severity":1,"message":"99","line":37,"column":16,"nodeType":"100","messageId":"101","endLine":37,"endColumn":31},{"ruleId":"91","severity":1,"message":"92","line":7,"column":16,"nodeType":"105","messageId":"94","endLine":7,"endColumn":61},{"ruleId":"91","severity":1,"message":"99","line":7,"column":41,"nodeType":"100","messageId":"101","endLine":7,"endColumn":60},{"ruleId":"91","severity":1,"message":"92","line":23,"column":30,"nodeType":"93","messageId":"94","endLine":23,"endColumn":56},{"ruleId":"91","severity":1,"message":"99","line":23,"column":31,"nodeType":"100","messageId":"101","endLine":23,"endColumn":52},{"ruleId":"102","severity":1,"message":"106","line":3,"column":5,"nodeType":"97","messageId":"104","endLine":3,"endColumn":19},{"ruleId":"102","severity":1,"message":"107","line":4,"column":5,"nodeType":"97","messageId":"104","endLine":4,"endColumn":24},{"ruleId":"102","severity":1,"message":"108","line":6,"column":5,"nodeType":"97","messageId":"104","endLine":6,"endColumn":8},{"ruleId":"102","severity":1,"message":"109","line":10,"column":5,"nodeType":"97","messageId":"104","endLine":10,"endColumn":9},{"ruleId":"110","severity":1,"message":"111","line":13,"column":22,"nodeType":"112","messageId":"113","endLine":13,"endColumn":25,"suggestions":"114"},{"ruleId":"102","severity":1,"message":"115","line":8,"column":8,"nodeType":"97","messageId":"104","endLine":8,"endColumn":16},{"ruleId":"102","severity":1,"message":"116","line":9,"column":8,"nodeType":"97","messageId":"104","endLine":9,"endColumn":20},{"ruleId":"102","severity":1,"message":"117","line":10,"column":8,"nodeType":"97","messageId":"104","endLine":10,"endColumn":20},{"ruleId":"102","severity":1,"message":"118","line":17,"column":10,"nodeType":"97","messageId":"104","endLine":17,"endColumn":17},{"ruleId":"102","severity":1,"message":"119","line":18,"column":16,"nodeType":"97","messageId":"104","endLine":18,"endColumn":22},{"ruleId":"91","severity":1,"message":"99","line":73,"column":21,"nodeType":"100","messageId":"101","endLine":73,"endColumn":36},{"ruleId":"102","severity":1,"message":"120","line":74,"column":11,"nodeType":"97","messageId":"104","endLine":74,"endColumn":26},"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","FunctionExpression","Argument 'body' should be typed.","Identifier","missingArgType","Object pattern argument should be typed.","ObjectPattern","missingArgTypeUnnamed","@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","unusedVar","FunctionDeclaration","'AccountBalance' is defined but never used.","'CollectionsBookmark' is defined but never used.","'Dns' is defined but never used.","'List' is defined but never used.","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["121","122"],"'ListItem' is defined but never used.","'ListItemText' is defined but never used.","'ListItemIcon' is defined but never used.","'NavLink' is defined but never used.","'uuidv4' is defined but never used.","'dummyCategories' is assigned a value but never used.",{"messageId":"123","fix":"124","desc":"125"},{"messageId":"126","fix":"127","desc":"128"},"suggestUnknown",{"range":"129","text":"130"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"129","text":"131"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",[225,228],"unknown","never"]