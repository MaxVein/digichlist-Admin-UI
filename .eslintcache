[{"D:\\Softserve\\digichlist-Admin-UI\\src\\index.tsx":"1","D:\\Softserve\\digichlist-Admin-UI\\src\\reportWebVitals.ts":"2","D:\\Softserve\\digichlist-Admin-UI\\src\\App.tsx":"3","D:\\Softserve\\digichlist-Admin-UI\\src\\common\\guards\\LoginRoute.tsx":"4","D:\\Softserve\\digichlist-Admin-UI\\src\\common\\guards\\ProtectedRoute.tsx":"5","D:\\Softserve\\digichlist-Admin-UI\\src\\common\\utils\\api.tsx":"6","D:\\Softserve\\digichlist-Admin-UI\\src\\features\\login\\admin\\AdminPanel.tsx":"7","D:\\Softserve\\digichlist-Admin-UI\\src\\features\\login\\index.js":"8","D:\\Softserve\\digichlist-Admin-UI\\src\\features\\login\\admin\\nav.tsx":"9","D:\\Softserve\\digichlist-Admin-UI\\src\\environments\\environment.tsx":"10","D:\\Softserve\\digichlist-Admin-UI\\src\\features\\login\\admin\\AdminNavItem.tsx":"11","D:\\Softserve\\digichlist-Admin-UI\\src\\features\\login\\Login.tsx":"12","D:\\Softserve\\digichlist-Admin-UI\\src\\features\\login\\admin\\admins\\index.js":"13","D:\\Softserve\\digichlist-Admin-UI\\src\\common\\components\\Snackbar\\snackbar.js":"14","D:\\Softserve\\digichlist-Admin-UI\\src\\features\\login\\admin\\admins\\Admins.tsx":"15","D:\\Softserve\\digichlist-Admin-UI\\src\\features\\login\\admin\\admins\\AdminsServise.ts":"16","D:\\Softserve\\digichlist-Admin-UI\\src\\features\\login\\admin\\admins\\AdminRow.tsx":"17","D:\\Softserve\\digichlist-Admin-UI\\src\\common\\utils\\interceptor.ts":"18","D:\\Softserve\\digichlist-Admin-UI\\src\\features\\login\\admin\\admins\\AdminAddDialog.tsx":"19","D:\\Softserve\\digichlist-Admin-UI\\src\\features\\login\\admin\\admins\\ConfirmDelete.tsx":"20"},{"size":573,"mtime":1611431841842,"results":"21","hashOfConfig":"22"},{"size":482,"mtime":1611430781593,"results":"23","hashOfConfig":"22"},{"size":1333,"mtime":1611525209143,"results":"24","hashOfConfig":"22"},{"size":809,"mtime":1611569434932,"results":"25","hashOfConfig":"22"},{"size":775,"mtime":1611431841816,"results":"26","hashOfConfig":"22"},{"size":591,"mtime":1611527498899,"results":"27","hashOfConfig":"22"},{"size":5665,"mtime":1611527499296,"results":"28","hashOfConfig":"22"},{"size":53,"mtime":1611431841838,"results":"29","hashOfConfig":"22"},{"size":684,"mtime":1611508188547,"results":"30","hashOfConfig":"22"},{"size":102,"mtime":1611431841826,"results":"31","hashOfConfig":"22"},{"size":1030,"mtime":1611508188292,"results":"32","hashOfConfig":"22"},{"size":4897,"mtime":1611522911298,"results":"33","hashOfConfig":"22"},{"size":58,"mtime":1611527499613,"results":"34","hashOfConfig":"22"},{"size":663,"mtime":1611431841810,"results":"35","hashOfConfig":"22"},{"size":8110,"mtime":1611590481020,"results":"36","hashOfConfig":"22"},{"size":1342,"mtime":1611590600508,"results":"37","hashOfConfig":"22"},{"size":1914,"mtime":1611587620014,"results":"38","hashOfConfig":"22"},{"size":635,"mtime":1611527499000,"results":"39","hashOfConfig":"22"},{"size":9125,"mtime":1611589599926,"results":"40","hashOfConfig":"22"},{"size":1505,"mtime":1611583268850,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"wicqdq",{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"44"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"44"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"44"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"44"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"44"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"44"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"44"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"64"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"44"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"44"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"44"},"D:\\Softserve\\digichlist-Admin-UI\\src\\index.tsx",[],[],"D:\\Softserve\\digichlist-Admin-UI\\src\\reportWebVitals.ts",["96"],"import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n            getCLS(onPerfEntry);\r\n            getFID(onPerfEntry);\r\n            getFCP(onPerfEntry);\r\n            getLCP(onPerfEntry);\r\n            getTTFB(onPerfEntry);\r\n        });\r\n    }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","D:\\Softserve\\digichlist-Admin-UI\\src\\App.tsx",[],"D:\\Softserve\\digichlist-Admin-UI\\src\\common\\guards\\LoginRoute.tsx",["97"],"import React from 'react';\r\nimport { Redirect, Route } from 'react-router-dom';\r\nconst LoginRoute = ({ component: Component, path, authInfo, setAuthInfo }): JSX.Element => {\r\n    return (\r\n        <Route\r\n            render={(props) => {\r\n                if (!authInfo) {\r\n                    return <Component setAuthInfo={setAuthInfo} path={path} {...props} />;\r\n                } else {\r\n                    return (\r\n                        <Redirect\r\n                            to={{\r\n                                pathname: '/admin/dashboard',\r\n                                state: { from: props.location },\r\n                            }}\r\n                        />\r\n                    );\r\n                }\r\n                \r\n            }}\r\n        />\r\n    );\r\n};\r\nexport default LoginRoute;\r\n","D:\\Softserve\\digichlist-Admin-UI\\src\\common\\guards\\ProtectedRoute.tsx",["98","99"],"import React from 'react';\r\nimport { Redirect, Route } from 'react-router-dom';\r\nconst ProtectedRoute = ({ component: Component, path, authInfo, setAuthInfo }) => {\r\n    return (\r\n        <Route\r\n            render={(props) => {\r\n                if (authInfo) {\r\n                    return <Component setAuthInfo={setAuthInfo} path={path} {...props} />;\r\n                } else {\r\n                    return (\r\n                        <Redirect\r\n                            to={{\r\n                                pathname: '/login',\r\n                                state: { from: props.location },\r\n                            }}\r\n                        />\r\n                    );\r\n                }\r\n            }}\r\n        />\r\n    );\r\n};\r\nexport default ProtectedRoute;\r\n","D:\\Softserve\\digichlist-Admin-UI\\src\\common\\utils\\api.tsx",["100","101","102","103"],"import axios from 'axios';\r\nimport { environment } from '../../environments/environment';\r\n\r\nexport const login = async (body) => {\r\n    try {\r\n        const response = await axios.post(`${environment.BASEURL}authorization/login`, body);\r\n        sessionStorage.setItem('secret-auth-token', response.data.token);\r\n        return response.data;\r\n    } catch (err) {\r\n        return { err: err };\r\n    }\r\n};\r\nexport const logOut = () => {\r\n    sessionStorage.removeItem('secret-auth-token');\r\n};\r\nexport const isLogged = () => {\r\n    return !!sessionStorage.getItem('secret-auth-token');\r\n};\r\n","D:\\Softserve\\digichlist-Admin-UI\\src\\features\\login\\admin\\AdminPanel.tsx",["104","105","106","107","108","109","110","111"],"import React from 'react';\r\nimport { Link, Route, Switch } from 'react-router-dom';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Hidden from '@material-ui/core/Hidden';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n// import VisibleItemList from '../containers/VisibleItemList';\r\nimport { MainListItems } from './AdminNavItem';\r\nimport Admins from './admins';\r\nimport { navList } from './nav';\r\nimport { logOut } from '../../../common/utils/api';\r\n\r\nconst drawerWidth = 240;\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    drawer: {\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: drawerWidth,\r\n            flexShrink: 0,\r\n        },\r\n    },\r\n    appBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n        [theme.breakpoints.up('sm')]: {\r\n            display: 'none',\r\n        },\r\n    },\r\n    toolbar: theme.mixins.toolbar,\r\n    drawerPaper: {\r\n        width: drawerWidth,\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n        padding: theme.spacing(3),\r\n    },\r\n    closeMenuButton: {\r\n        marginRight: 'auto',\r\n        marginLeft: 0,\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    itemText: {\r\n        fontSize: '1rem',\r\n    },\r\n    active: {\r\n        color: 'white',\r\n        fontWeight: 500,\r\n        backgroundColor: theme.palette.primary.main,\r\n        '& svg': {\r\n            color: 'white',\r\n        },\r\n    },\r\n}));\r\nconst AdminPanel = ({ setAuthInfo }): JSX.Element => {\r\n    const dummyCategories = ['Адміни', 'Дефекти', 'Користувачі', 'Репорт'];\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [mobileOpen, setMobileOpen] = React.useState(false);\r\n    function handleDrawerToggle() {\r\n        setMobileOpen(!mobileOpen);\r\n    }\r\n    const logoutHandler = async () => {\r\n        logOut();\r\n        setAuthInfo(false);\r\n    };\r\n    const drawer = (\r\n        <div>\r\n            <List>\r\n                {navList.map(({ path, icon, title }, index) => (\r\n                    <MainListItems key={index + title} path={path} icon={icon} title={title} />\r\n                ))}\r\n            </List>\r\n        </div>\r\n    );\r\n    return (\r\n        <div className={classes.root}>\r\n            <CssBaseline />\r\n            <AppBar position='fixed' className={classes.appBar}>\r\n                <Toolbar>\r\n                    <IconButton\r\n                        color='inherit'\r\n                        aria-label='Open drawer'\r\n                        edge='start'\r\n                        onClick={handleDrawerToggle}\r\n                        className={classes.menuButton}>\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <Typography variant='h6' className={classes.title}>\r\n                        Digichlist\r\n                    </Typography>\r\n                    <Button color='inherit' onClick={logoutHandler}>\r\n                        Logout\r\n                    </Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            <nav className={classes.drawer}>\r\n                {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\r\n                <Hidden smUp implementation='css'>\r\n                    <Drawer\r\n                        variant='temporary'\r\n                        anchor={theme.direction === 'rtl' ? 'right' : 'left'}\r\n                        open={mobileOpen}\r\n                        onClose={handleDrawerToggle}\r\n                        classes={{\r\n                            paper: classes.drawerPaper,\r\n                        }}\r\n                        ModalProps={{\r\n                            keepMounted: true, // Better open performance on mobile.\r\n                        }}>\r\n                        <IconButton\r\n                            onClick={handleDrawerToggle}\r\n                            className={classes.closeMenuButton}>\r\n                            <CloseIcon />\r\n                        </IconButton>\r\n                        {drawer}\r\n                    </Drawer>\r\n                </Hidden>\r\n                <Hidden xsDown implementation='css'>\r\n                    <Drawer\r\n                        className={classes.drawer}\r\n                        variant='permanent'\r\n                        classes={{\r\n                            paper: classes.drawerPaper,\r\n                        }}>\r\n                        <div className={classes.toolbar} />\r\n                        {drawer}\r\n                    </Drawer>\r\n                </Hidden>\r\n            </nav>\r\n            <div className={classes.content}>\r\n                <div className={classes.toolbar} />\r\n                <Switch>\r\n                    <Route path='/admin/admins' component={Admins} />\r\n                </Switch>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AdminPanel;\r\n","D:\\Softserve\\digichlist-Admin-UI\\src\\features\\login\\index.js",[],[],"D:\\Softserve\\digichlist-Admin-UI\\src\\features\\login\\admin\\nav.tsx",["112","113","114","115","116"],"import React from 'react';\nimport {\n    AccountBalance,\n    CollectionsBookmark,\n    Dashboard,\n    Dns,\n    Group,\n    InsertChartSharp,\n    SupervisedUserCircle,\n    List,\n} from '@material-ui/icons';\n\nexport const navList: any = [\n    {\n        path: '/admin/dashboard',\n        icon: <Dashboard />,\n        title: 'Головна',\n    },\n    {\n        path: '/admin/admins',\n        icon: <SupervisedUserCircle />,\n        title: 'Адміни',\n    },\n    {\n        path: '/admin/users',\n        icon: <Group />,\n        title: 'Користувачі',\n    },\n    {\n        path: '/admin/defects',\n        icon: <InsertChartSharp />,\n        title: 'Дефекти',\n    },\n];\n","D:\\Softserve\\digichlist-Admin-UI\\src\\environments\\environment.tsx",[],"D:\\Softserve\\digichlist-Admin-UI\\src\\features\\login\\admin\\AdminNavItem.tsx",["117","118"],"import React from 'react';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { NavLink } from 'react-router-dom';\n\nconst useStyles = makeStyles((theme) => ({\n    itemText: {\n        fontSize: '1rem',\n    },\n    active: {\n        color: 'white',\n        fontWeight: 500,\n        backgroundColor: theme.palette.primary.main,\n        '& svg': {\n            color: 'white',\n        },\n    },\n}));\n\nexport const MainListItems = ({ path, icon, title }) => {\n    const classes = useStyles();\n    return (\n        <ListItem component={NavLink} to={path} exact activeClassName={classes.active}>\n            <ListItemIcon>{icon}</ListItemIcon>\n            <ListItemText\n                disableTypography\n                className={classes.itemText}\n                color='primary'\n                primary={title}\n            />\n        </ListItem>\n    );\n};\n","D:\\Softserve\\digichlist-Admin-UI\\src\\features\\login\\Login.tsx",["119","120"],"import React, { useEffect, useState } from 'react';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { isLogged, login } from './../../common/utils/api';\r\nimport SnackbarHandler from './../../common/components/Snackbar/snackbar';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%',\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    logo: {\r\n        backgroundColor: '#fafafa',\r\n    },\r\n}));\r\n\r\nconst Login = ({ setAuthInfo }): JSX.Element => {\r\n    const [snack, setSnack] = useState({ open: false, message: '', type: 'success' });\r\n    const classes = useStyles();\r\n\r\n    const initialValues = {\r\n        name: '',\r\n        password: '',\r\n    };\r\n    const validationSchema = Yup.object({\r\n        name: Yup.string().required(`Обов'язкове поле`),\r\n        password: Yup.string().required(`Обов'язкове поле`),\r\n    });\r\n    const submitHandler = async (value) => {\r\n        const logInfo = { email: value.name, password: value.password };\r\n        const response = await login(logInfo);\r\n        if (response.err) {\r\n            setSnack({\r\n                open: true,\r\n                message: 'Неправильний логін або пароль',\r\n                type: 'error',\r\n            });\r\n        }\r\n        const isAuth = await isLogged();\r\n        setAuthInfo(isAuth);\r\n    };\r\n\r\n    return (\r\n        <Container component='main' maxWidth='xs'>\r\n            <CssBaseline />\r\n            <div className={classes.paper}>\r\n                <Typography component='h1' variant='h5'>\r\n                    Log in\r\n                </Typography>\r\n                <Formik\r\n                    initialValues={initialValues}\r\n                    validationSchema={validationSchema}\r\n                    onSubmit={submitHandler}\r\n                    validateOnMount={true}>\r\n                    {(props) => (\r\n                        <form className={classes.form} noValidate onSubmit={props.handleSubmit}>\r\n                            <TextField\r\n                                variant='outlined'\r\n                                margin='normal'\r\n                                required\r\n                                fullWidth\r\n                                id='name'\r\n                                label='Name'\r\n                                name='name'\r\n                                value={props.values.name}\r\n                                onBlur={props.handleBlur}\r\n                                onChange={props.handleChange}\r\n                                helperText={props.touched.name ? props.errors.name : ''}\r\n                                error={props.touched.name && Boolean(props.errors.name)}\r\n                            />\r\n\r\n                            <TextField\r\n                                variant='outlined'\r\n                                margin='normal'\r\n                                required\r\n                                fullWidth\r\n                                name='password'\r\n                                label='Password'\r\n                                type='password'\r\n                                id='password'\r\n                                onBlur={props.handleBlur}\r\n                                value={props.values.password}\r\n                                onChange={props.handleChange}\r\n                                helperText={props.touched.password ? props.errors.password : ''}\r\n                                error={props.touched.password && Boolean(props.errors.password)}\r\n                            />\r\n\r\n                            <Button\r\n                                disabled={!props.isValid}\r\n                                type='submit'\r\n                                fullWidth\r\n                                variant='contained'\r\n                                color='primary'\r\n                                className={classes.submit}>\r\n                                Log In\r\n                            </Button>\r\n                        </form>\r\n                    )}\r\n                </Formik>\r\n            </div>\r\n            <SnackbarHandler snack={snack} setSnack={setSnack} />\r\n        </Container>\r\n    );\r\n};\r\nexport default Login;\r\n","D:\\Softserve\\digichlist-Admin-UI\\src\\features\\login\\admin\\admins\\index.js",[],"D:\\Softserve\\digichlist-Admin-UI\\src\\common\\components\\Snackbar\\snackbar.js",["121","122"],"import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Alert from '@material-ui/lab/Alert';\r\n\r\nexport const messages = [];\r\n\r\nexport default function SnackbarHandler({ snack, setSnack }) {\r\n    const closeSnack = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setSnack({ open: false });\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={snack.open} autoHideDuration={3000} onClose={closeSnack}>\r\n            <Alert elevation={4} variant='filled' onClose={closeSnack} severity={snack.type}>\r\n                {snack.message}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","D:\\Softserve\\digichlist-Admin-UI\\src\\features\\login\\admin\\admins\\Admins.tsx",["123","124"],"D:\\Softserve\\digichlist-Admin-UI\\src\\features\\login\\admin\\admins\\AdminsServise.ts",["125","126","127","128","129","130","131","132","133","134","135"],"D:\\Softserve\\digichlist-Admin-UI\\src\\features\\login\\admin\\admins\\AdminRow.tsx",["136","137"],"import React, { useState } from 'react';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { Button } from '@material-ui/core';\n\nimport ConfirmDelete from './ConfirmDelete';\nimport AdminAddDialog from './AdminAddDialog';\n\nconst AdminRow = ({ adminData, id, setDeleteAdmin, setEditAdmin }) => {\n    const { username, email, _id } = adminData;\n    const [edit, setEdit] = useState(false);\n    const [openDel, setOpenDel] = useState(false);    \n\n    const dialogOpenHandler = () => {\n        setEdit(true);\n    };\n\n    const dialogOpenDelHandler = () => {\n        setOpenDel(true);\n    };\n    return (\n        <TableRow>\n            <TableCell>{id}</TableCell>\n            <TableCell>{username}</TableCell>\n            <TableCell>{email}</TableCell>\n            <TableCell>\n                <div>\n                    <Button color='primary' onClick={dialogOpenHandler}>\n                        <EditIcon />\n                    </Button>\n                    <Button color='primary' onClick={dialogOpenDelHandler}>\n                        <DeleteIcon />\n                    </Button>\n                </div>\n            </TableCell>\n            {openDel ? (\n                <ConfirmDelete\n                    open={openDel}\n                    setShowDelDialog={setOpenDel}\n                    id={_id}\n                    setDeleteAdmin={setDeleteAdmin}\n                />\n            ) : null}\n            {edit ? (\n                <AdminAddDialog\n                open={edit}\n                setOpen={setEdit}\n                setAddAdmin={null}\n                admin={adminData}\n                setEdit={setEdit}\n                setEditAdmin={setEditAdmin}\n                />\n            ) : null}\n        </TableRow>\n    \n    );\n};\nexport default AdminRow;\n","D:\\Softserve\\digichlist-Admin-UI\\src\\common\\utils\\interceptor.ts",[],"D:\\Softserve\\digichlist-Admin-UI\\src\\features\\login\\admin\\admins\\AdminAddDialog.tsx",["138","139","140"],"import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { v4 as uuidv4 } from 'uuid';\nimport { Formik } from 'formik';\n\n\nimport * as Yup from 'yup';\n\nconst AdminAddDialog = ({\n    open,\n    setOpen,\n    admin,\n    setEdit,\n    setAddAdmin,\n    setEditAdmin,\n}) => {\n    \n    const initialValues = {\n        username: admin ? admin.username : '',\n        email: admin ? admin.email : '',\n        password: '',\n        confirmPassword: '',\n    };\n\n    const validationSchema = admin? Yup.object({\n        username: Yup.string()\n            .required('Заповни поле')\n            .min(5, 'Коротке ім\\'я' )\n            .max(50, 'Задовге ім\\'я'),\n        email: Yup.string().email('Введіть коректну пошту').required('Заповни поле'),\n        password: Yup.string()\n            .min(8, 'Мінімум 8 символів')\n            .matches(new RegExp('((?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{8,30})'), 'Невідповідний пароль'),\n        confirmPassword: Yup.string().oneOf(\n            [Yup.ref('password'), null],\n            'Паролі не співпадають',\n        ),\n    }):\n    Yup.object({\n        username: Yup.string()\n            .required('Заповни поле')\n            .min(5, 'Коротке ім\\'я' )\n            .max(50, 'Задовге ім\\'я'),\n        email: Yup.string().email('Введіть коректну пошту').required('Заповни поле'),\n        password: Yup.string().required('Заповни поле')\n            .min(8, 'Мінімум 8 символів')\n            .matches(new RegExp('((?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{8,30})'), 'Невідповідний пароль'),\n        confirmPassword: Yup.string().oneOf(\n            [Yup.ref('password'), null],\n            'Паролі не співпадають',\n        ),\n    });\n    const handleClose = () => {\n        admin ? setEdit(false) : setOpen(false);\n    };\n\n    const compareObj = (x, y) => {\n        let isEqual = true;\n        for (const prop in x) {\n            if (x[prop] !== y[prop]) {\n                isEqual = false;\n                break;\n            }\n        }\n        return isEqual;\n    };\n    return (\n        <div>\n            <Dialog\n                open={open}\n                onClose={handleClose}\n                id=\"form-dialog\"\n                aria-labelledby=\"form-dialog-title\"\n            >\n                <DialogTitle id=\"form-dialog-title\">\n                    {admin ? 'Редагувати' : 'Добавити'}\n                </DialogTitle>\n                <DialogContent>\n                    <Formik\n                        initialValues={initialValues}\n                        validationSchema={validationSchema}\n                        validateOnMount={true}\n                        onSubmit={(data) => {\n                            console.log(data);\n                            console.log(data.password === '');\n                            if (admin) {\n                                if (\n                                    compareObj(\n                                        {\n                                            username: admin.username,\n                                            email: admin.email,\n                                            password: admin.password,\n                                        },\n                                        data = data.password === ''? {...data,password:admin.password } \n                                        : data,\n                                    )\n                                ) {\n                                    setEditAdmin({\n                                        edit: true,\n                                        data: data,\n                                        isChanged: false,\n                                        editId: admin._id,\n                                    });\n                                } else {\n                                    setEditAdmin({\n                                        edit: true,\n                                        data: data,\n                                        isChanged: true,\n                                        editId: admin._id,\n                                    });\n                                }\n                            } else {\n                                setAddAdmin({\n                                    add: true,\n                                    data: data,\n                                });\n                            }\n                         }\n                    }\n                    >\n                        {({\n                            isValid,\n                            errors,\n                            touched,\n                            values,\n                            handleChange,\n                            handleBlur,\n                            handleSubmit,\n                        }) => (\n                            <form onSubmit={handleSubmit}>\n                                <TextField\n                                    name=\"username\"\n                                    value={values.username}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    autoFocus\n                                    margin=\"dense\"\n                                    id=\"username\"\n                                    label={'Імя користувача'}\n                                    type=\"text\"\n                                    fullWidth\n                                    error={touched.username && Boolean(errors.username)}\n                                />\n                                <TextField\n                                    name=\"email\"\n                                    value={values.email}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    autoFocus\n                                    margin=\"dense\"\n                                    id=\"email\"\n                                    label={'Пошта'}\n                                    type=\"text\"\n                                    fullWidth\n                                    error={touched.email && Boolean(errors.email)}\n                                />\n                                <TextField\n                                    fullWidth\n                                    margin=\"dense\"\n                                    type=\"password\"\n                                    label={'Введіть пароль'}\n                                    name=\"password\"\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    value={values.password}\n                                    helperText={touched.password ? errors.password : ''}\n                                    error={touched.password && Boolean(errors.password)}\n                                />\n                                <TextField\n                                    fullWidth\n                                    margin=\"dense\"\n                                    type=\"password\"\n                                    label={'Підтвердіть пароль'}\n                                    name=\"confirmPassword\"\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    value={values.confirmPassword}\n                                    helperText={\n                                        touched.confirmPassword ? errors.confirmPassword : ''\n                                    }\n                                    error={\n                                        touched.confirmPassword && Boolean(errors.confirmPassword)\n                                    }\n                                />\n                                \n                                <div style={{ margin: '1rem', textAlign: 'center' }}>\n                                    <Button onClick={handleClose} color=\"primary\">\n                                        {'Відмінити'}\n                                    </Button>\n                                    <Button disabled={!isValid} type=\"submit\" color=\"primary\">\n                                        {admin\n                                            ? 'Оновити'\n                                            : 'Добавити'}\n                                    </Button>\n                                </div>\n                            </form>\n                        )}\n                    </Formik>\n                </DialogContent>\n            </Dialog>\n        </div>\n    );\n};\n\nexport default AdminAddDialog;","D:\\Softserve\\digichlist-Admin-UI\\src\\features\\login\\admin\\admins\\ConfirmDelete.tsx",["141","142"],"import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nconst ConfirmDelete = ({ open, setShowDelDialog, id, setDeleteAdmin }) => {\n\n    const handleClose = () => {\n        setShowDelDialog(false);\n    };\n\n    return (\n        <Dialog open={open} onClose={handleClose} aria-labelledby=\"responsive-dialog-title\">\n            <DialogTitle id=\"responsive-dialog-title\">Видалити адміна</DialogTitle>\n            <DialogContent>\n                <DialogContentText>Ви впевнені що хочете видалити адміна?</DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Button autoFocus onClick={handleClose} color=\"primary\">\n                   Відмінити\n                </Button>\n                <Button\n                    onClick={() => {\n                        setShowDelDialog(false);\n                        setDeleteAdmin({ id: id, delete: true });\n                    }}\n                    color=\"primary\"\n                    autoFocus\n                >\n                    Видалити\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n\nexport default ConfirmDelete;",{"ruleId":"143","severity":1,"message":"144","line":3,"column":25,"nodeType":"145","messageId":"146","endLine":3,"endColumn":57},{"ruleId":"143","severity":1,"message":"147","line":3,"column":21,"nodeType":"148","messageId":"149","endLine":3,"endColumn":74},{"ruleId":"143","severity":1,"message":"144","line":3,"column":24,"nodeType":"145","messageId":"146","endLine":3,"endColumn":82},{"ruleId":"143","severity":1,"message":"147","line":3,"column":25,"nodeType":"148","messageId":"149","endLine":3,"endColumn":78},{"ruleId":"143","severity":1,"message":"144","line":4,"column":22,"nodeType":"145","messageId":"146","endLine":4,"endColumn":37},{"ruleId":"143","severity":1,"message":"150","line":4,"column":29,"nodeType":"151","messageId":"152","endLine":4,"endColumn":33},{"ruleId":"143","severity":1,"message":"144","line":13,"column":23,"nodeType":"145","messageId":"146","endLine":13,"endColumn":28},{"ruleId":"143","severity":1,"message":"144","line":16,"column":25,"nodeType":"145","messageId":"146","endLine":16,"endColumn":30},{"ruleId":"153","severity":1,"message":"154","line":2,"column":10,"nodeType":"151","messageId":"155","endLine":2,"endColumn":14},{"ruleId":"153","severity":1,"message":"156","line":9,"column":8,"nodeType":"151","messageId":"155","endLine":9,"endColumn":16},{"ruleId":"153","severity":1,"message":"157","line":10,"column":8,"nodeType":"151","messageId":"155","endLine":10,"endColumn":20},{"ruleId":"153","severity":1,"message":"158","line":11,"column":8,"nodeType":"151","messageId":"155","endLine":11,"endColumn":20},{"ruleId":"153","severity":1,"message":"159","line":18,"column":10,"nodeType":"151","messageId":"155","endLine":18,"endColumn":17},{"ruleId":"153","severity":1,"message":"160","line":19,"column":16,"nodeType":"151","messageId":"155","endLine":19,"endColumn":22},{"ruleId":"143","severity":1,"message":"147","line":74,"column":21,"nodeType":"148","messageId":"149","endLine":74,"endColumn":36},{"ruleId":"153","severity":1,"message":"161","line":75,"column":11,"nodeType":"151","messageId":"155","endLine":75,"endColumn":26},{"ruleId":"153","severity":1,"message":"162","line":3,"column":5,"nodeType":"151","messageId":"155","endLine":3,"endColumn":19},{"ruleId":"153","severity":1,"message":"163","line":4,"column":5,"nodeType":"151","messageId":"155","endLine":4,"endColumn":24},{"ruleId":"153","severity":1,"message":"164","line":6,"column":5,"nodeType":"151","messageId":"155","endLine":6,"endColumn":8},{"ruleId":"153","severity":1,"message":"165","line":10,"column":5,"nodeType":"151","messageId":"155","endLine":10,"endColumn":9},{"ruleId":"166","severity":1,"message":"167","line":13,"column":23,"nodeType":"168","messageId":"169","endLine":13,"endColumn":26,"suggestions":"170"},{"ruleId":"143","severity":1,"message":"144","line":23,"column":30,"nodeType":"145","messageId":"146","endLine":23,"endColumn":56},{"ruleId":"143","severity":1,"message":"147","line":23,"column":31,"nodeType":"148","messageId":"149","endLine":23,"endColumn":52},{"ruleId":"153","severity":1,"message":"171","line":1,"column":17,"nodeType":"151","messageId":"155","endLine":1,"endColumn":26},{"ruleId":"143","severity":1,"message":"147","line":37,"column":16,"nodeType":"148","messageId":"149","endLine":37,"endColumn":31},{"ruleId":"143","severity":1,"message":"144","line":7,"column":16,"nodeType":"172","messageId":"146","endLine":7,"endColumn":61},{"ruleId":"143","severity":1,"message":"147","line":7,"column":41,"nodeType":"148","messageId":"149","endLine":7,"endColumn":60},{"ruleId":"153","severity":1,"message":"173","line":13,"column":8,"nodeType":"151","messageId":"155","endLine":13,"endColumn":18},{"ruleId":"143","severity":1,"message":"144","line":22,"column":23,"nodeType":"145","messageId":"146","endLine":22,"endColumn":28},{"ruleId":"153","severity":1,"message":"174","line":3,"column":8,"nodeType":"151","messageId":"155","endLine":3,"endColumn":13},{"ruleId":"143","severity":1,"message":"144","line":5,"column":26,"nodeType":"145","messageId":"146","endLine":5,"endColumn":37},{"ruleId":"143","severity":1,"message":"144","line":7,"column":29,"nodeType":"145","messageId":"146","endLine":7,"endColumn":47},{"ruleId":"143","severity":1,"message":"175","line":7,"column":36,"nodeType":"151","messageId":"152","endLine":7,"endColumn":43},{"ruleId":"143","severity":1,"message":"144","line":16,"column":32,"nodeType":"145","messageId":"146","endLine":16,"endColumn":57},{"ruleId":"143","severity":1,"message":"176","line":16,"column":39,"nodeType":"151","messageId":"152","endLine":16,"endColumn":41},{"ruleId":"143","severity":1,"message":"177","line":16,"column":43,"nodeType":"151","messageId":"152","endLine":16,"endColumn":53},{"ruleId":"153","severity":1,"message":"178","line":18,"column":11,"nodeType":"151","messageId":"155","endLine":18,"endColumn":19},{"ruleId":"143","severity":1,"message":"144","line":26,"column":32,"nodeType":"145","messageId":"146","endLine":27,"endColumn":18},{"ruleId":"143","severity":1,"message":"177","line":26,"column":39,"nodeType":"151","messageId":"152","endLine":26,"endColumn":49},{"ruleId":"143","severity":1,"message":"179","line":27,"column":5,"nodeType":"151","messageId":"152","endLine":27,"endColumn":14},{"ruleId":"143","severity":1,"message":"144","line":11,"column":18,"nodeType":"145","messageId":"146","endLine":11,"endColumn":70},{"ruleId":"143","severity":1,"message":"147","line":11,"column":19,"nodeType":"148","messageId":"149","endLine":11,"endColumn":66},{"ruleId":"153","severity":1,"message":"160","line":7,"column":16,"nodeType":"151","messageId":"155","endLine":7,"endColumn":22},{"ruleId":"143","severity":1,"message":"144","line":13,"column":24,"nodeType":"145","messageId":"146","endLine":20,"endColumn":6},{"ruleId":"143","severity":1,"message":"147","line":13,"column":25,"nodeType":"148","messageId":"149","endLine":20,"endColumn":2},{"ruleId":"143","severity":1,"message":"144","line":9,"column":23,"nodeType":"145","messageId":"146","endLine":9,"endColumn":74},{"ruleId":"143","severity":1,"message":"147","line":9,"column":24,"nodeType":"148","messageId":"149","endLine":9,"endColumn":70},"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","Object pattern argument should be typed.","ObjectPattern","missingArgTypeUnnamed","Argument 'body' should be typed.","Identifier","missingArgType","@typescript-eslint/no-unused-vars","'Link' is defined but never used.","unusedVar","'ListItem' is defined but never used.","'ListItemText' is defined but never used.","'ListItemIcon' is defined but never used.","'NavLink' is defined but never used.","'uuidv4' is defined but never used.","'dummyCategories' is assigned a value but never used.","'AccountBalance' is defined but never used.","'CollectionsBookmark' is defined but never used.","'Dns' is defined but never used.","'List' is defined but never used.","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["180","181"],"'useEffect' is defined but never used.","FunctionDeclaration","'SearchIcon' is defined but never used.","'axios' is defined but never used.","Argument 'payload' should be typed.","Argument 'id' should be typed.","Argument 'adminsData' should be typed.","'response' is assigned a value but never used.","Argument 'editAdmin' should be typed.",{"messageId":"182","fix":"183","desc":"184"},{"messageId":"185","fix":"186","desc":"187"},"suggestUnknown",{"range":"188","text":"189"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"188","text":"190"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",[226,229],"unknown","never"]