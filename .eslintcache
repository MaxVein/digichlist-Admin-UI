[{"D:\\Softserve\\digichlist-Admin-UI\\src\\index.tsx":"1","D:\\Softserve\\digichlist-Admin-UI\\src\\reportWebVitals.ts":"2","D:\\Softserve\\digichlist-Admin-UI\\src\\App.tsx":"3","D:\\Softserve\\digichlist-Admin-UI\\src\\common\\guards\\ProtectedRoute.tsx":"4","D:\\Softserve\\digichlist-Admin-UI\\src\\features\\login\\admin\\AdminPanel.tsx":"5","D:\\Softserve\\digichlist-Admin-UI\\src\\common\\guards\\LoginRoute.tsx":"6","D:\\Softserve\\digichlist-Admin-UI\\src\\common\\utils\\api.tsx":"7","D:\\Softserve\\digichlist-Admin-UI\\src\\features\\login\\index.js":"8","D:\\Softserve\\digichlist-Admin-UI\\src\\features\\login\\admin\\AdminNavItem.tsx":"9","D:\\Softserve\\digichlist-Admin-UI\\src\\environments\\environment.tsx":"10","D:\\Softserve\\digichlist-Admin-UI\\src\\features\\login\\admin\\nav.tsx":"11","D:\\Softserve\\digichlist-Admin-UI\\src\\features\\login\\Login.tsx":"12","D:\\Softserve\\digichlist-Admin-UI\\src\\common\\components\\Snackbar\\snackbar.js":"13","D:\\Softserve\\digichlist-Admin-UI\\src\\features\\login\\admin\\admins\\index.js":"14","D:\\Softserve\\digichlist-Admin-UI\\src\\features\\login\\admin\\admins\\Admins.tsx":"15","D:\\Softserve\\digichlist-Admin-UI\\src\\features\\login\\admin\\admins\\AdminsServise.ts":"16","D:\\Softserve\\digichlist-Admin-UI\\src\\common\\utils\\interceptor.ts":"17","D:\\Softserve\\digichlist-Admin-UI\\src\\features\\login\\admin\\admins\\AdminRow.tsx":"18"},{"size":573,"mtime":1611431841842,"results":"19","hashOfConfig":"20"},{"size":482,"mtime":1611430781593,"results":"21","hashOfConfig":"20"},{"size":1333,"mtime":1611525209143,"results":"22","hashOfConfig":"20"},{"size":775,"mtime":1611431841816,"results":"23","hashOfConfig":"20"},{"size":5670,"mtime":1611514274037,"results":"24","hashOfConfig":"20"},{"size":791,"mtime":1611431841813,"results":"25","hashOfConfig":"20"},{"size":649,"mtime":1611514219734,"results":"26","hashOfConfig":"20"},{"size":53,"mtime":1611431841838,"results":"27","hashOfConfig":"20"},{"size":1030,"mtime":1611508188292,"results":"28","hashOfConfig":"20"},{"size":102,"mtime":1611431841826,"results":"29","hashOfConfig":"20"},{"size":684,"mtime":1611508188547,"results":"30","hashOfConfig":"20"},{"size":4897,"mtime":1611522911298,"results":"31","hashOfConfig":"20"},{"size":663,"mtime":1611431841810,"results":"32","hashOfConfig":"20"},{"size":55,"mtime":1611510218659,"results":"33","hashOfConfig":"20"},{"size":3950,"mtime":1611527157086,"results":"34","hashOfConfig":"20"},{"size":268,"mtime":1611525291325,"results":"35","hashOfConfig":"20"},{"size":631,"mtime":1611526733508,"results":"36","hashOfConfig":"20"},{"size":1297,"mtime":1611523939092,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"wicqdq",{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"40"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"40"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"40"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"40"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"60"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\Softserve\\digichlist-Admin-UI\\src\\index.tsx",[],[],"D:\\Softserve\\digichlist-Admin-UI\\src\\reportWebVitals.ts",["84"],"import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n            getCLS(onPerfEntry);\r\n            getFID(onPerfEntry);\r\n            getFCP(onPerfEntry);\r\n            getLCP(onPerfEntry);\r\n            getTTFB(onPerfEntry);\r\n        });\r\n    }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","D:\\Softserve\\digichlist-Admin-UI\\src\\App.tsx",[],"D:\\Softserve\\digichlist-Admin-UI\\src\\common\\guards\\ProtectedRoute.tsx",["85","86"],"import React from 'react';\r\nimport { Redirect, Route } from 'react-router-dom';\r\nconst ProtectedRoute = ({ component: Component, path, authInfo, setAuthInfo }) => {\r\n    return (\r\n        <Route\r\n            render={(props) => {\r\n                if (authInfo) {\r\n                    return <Component setAuthInfo={setAuthInfo} path={path} {...props} />;\r\n                } else {\r\n                    return (\r\n                        <Redirect\r\n                            to={{\r\n                                pathname: '/login',\r\n                                state: { from: props.location },\r\n                            }}\r\n                        />\r\n                    );\r\n                }\r\n            }}\r\n        />\r\n    );\r\n};\r\nexport default ProtectedRoute;\r\n","D:\\Softserve\\digichlist-Admin-UI\\src\\features\\login\\admin\\AdminPanel.tsx",["87","88","89","90","91","92","93","94"],"import React from 'react';\r\nimport { Link, Route, Switch } from 'react-router-dom';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Hidden from '@material-ui/core/Hidden';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n// import VisibleItemList from '../containers/VisibleItemList';\r\nimport { MainListItems } from './AdminNavItem';\r\nimport Admins from './admins'\r\nimport { navList } from './nav';\r\nimport { logOut } from '../../../common/utils/api';\r\n\r\nconst drawerWidth = 240;\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    drawer: {\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: drawerWidth,\r\n            flexShrink: 0,\r\n        },\r\n    },\r\n    appBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n        [theme.breakpoints.up('sm')]: {\r\n            display: 'none',\r\n        },\r\n    },\r\n    toolbar: theme.mixins.toolbar,\r\n    drawerPaper: {\r\n        width: drawerWidth,\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n        padding: theme.spacing(3),\r\n    },\r\n    closeMenuButton: {\r\n        marginRight: 'auto',\r\n        marginLeft: 0,\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    itemText: {\r\n        fontSize: '1rem',\r\n    },\r\n    active: {\r\n        color: 'white',\r\n        fontWeight: 500,\r\n        backgroundColor: theme.palette.primary.main,\r\n        '& svg': {\r\n            color: 'white',\r\n        },\r\n    },\r\n}));\r\nconst AdminPanel = ({ setAuthInfo }): JSX.Element => {\r\n    const dummyCategories = ['Адміни', 'Дефекти', 'Користувачі', 'Репорт'];\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [mobileOpen, setMobileOpen] = React.useState(false);\r\n    function handleDrawerToggle() {\r\n        setMobileOpen(!mobileOpen);\r\n    }\r\n    const logoutHandler = async () => {\r\n        logOut();\r\n        setAuthInfo(false);\r\n    };\r\n    const drawer = (\r\n        <div>\r\n            <List>\r\n                {navList.map(({ path, icon, title }, index) => (\r\n                    <MainListItems key={index + title} path={path} icon={icon} title={title} />\r\n                ))}\r\n            </List>\r\n        </div>\r\n    );\r\n    return (\r\n        <div className={classes.root}>\r\n            <CssBaseline />\r\n            <AppBar position='fixed' className={classes.appBar}>\r\n                <Toolbar>\r\n                    <IconButton\r\n                        color='inherit'\r\n                        aria-label='Open drawer'\r\n                        edge='start'\r\n                        onClick={handleDrawerToggle}\r\n                        className={classes.menuButton}>\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <Typography variant='h6' className={classes.title}>\r\n                        Digichlist\r\n                    </Typography>\r\n                    <Button color='inherit' onClick={logoutHandler}>\r\n                        Logout\r\n                    </Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            <nav className={classes.drawer}>\r\n                {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\r\n                <Hidden smUp implementation='css'>\r\n                    <Drawer\r\n                        variant='temporary'\r\n                        anchor={theme.direction === 'rtl' ? 'right' : 'left'}\r\n                        open={mobileOpen}\r\n                        onClose={handleDrawerToggle}\r\n                        classes={{\r\n                            paper: classes.drawerPaper,\r\n                        }}\r\n                        ModalProps={{\r\n                            keepMounted: true, // Better open performance on mobile.\r\n                        }}>\r\n                        <IconButton\r\n                            onClick={handleDrawerToggle}\r\n                            className={classes.closeMenuButton}>\r\n                            <CloseIcon />\r\n                        </IconButton>\r\n                        {drawer}\r\n                    </Drawer>\r\n                </Hidden>\r\n                <Hidden xsDown implementation='css'>\r\n                    <Drawer\r\n                        className={classes.drawer}\r\n                        variant='permanent'\r\n                        classes={{\r\n                            paper: classes.drawerPaper,\r\n                        }}>\r\n                        <div className={classes.toolbar} />\r\n                        {drawer}\r\n                    </Drawer>\r\n                </Hidden>\r\n            </nav>\r\n            <div className={classes.content}>\r\n                <div className={classes.toolbar} />\r\n                <Switch>            \r\n                <Route path=\"/admin/admins\" component={Admins} />\r\n              </Switch>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AdminPanel;\r\n","D:\\Softserve\\digichlist-Admin-UI\\src\\common\\guards\\LoginRoute.tsx",["95"],"import React from 'react';\r\nimport { Redirect, Route } from 'react-router-dom';\r\nconst LoginRoute = ({ component: Component, path, authInfo, setAuthInfo }): JSX.Element => {\r\n    return (\r\n        <Route\r\n            render={(props) => {\r\n                if (!authInfo) {\r\n                    return <Component setAuthInfo={setAuthInfo} path={path} {...props} />;\r\n                } else {\r\n                    return (\r\n                        <Redirect\r\n                            to={{\r\n                                pathname: '/admin/dashboard',\r\n                                state: { from: props.location },\r\n                            }}\r\n                        />\r\n                    );\r\n                }\r\n            }}\r\n        />\r\n    );\r\n};\r\nexport default LoginRoute;\r\n","D:\\Softserve\\digichlist-Admin-UI\\src\\common\\utils\\api.tsx",["96","97","98","99"],"import axios from 'axios';\r\nimport { environment } from '../../environments/environment';\r\n\r\n    export const login = async(body) => {\r\n        try {\r\n            const response = await axios.post(`${environment.BASEURL}authorization/login`, body);\r\n            sessionStorage.setItem('secret-auth-token', response.data.token);\r\n            return response.data;\r\n        } catch (err) {\r\n            return { err: err };\r\n        }\r\n    }\r\n    export const logOut = () => {\r\n        sessionStorage.removeItem('secret-auth-token');\r\n    }\r\n    export const isLogged = () => {\r\n        return !!sessionStorage.getItem('secret-auth-token');\r\n    }\r\n\r\n","D:\\Softserve\\digichlist-Admin-UI\\src\\features\\login\\index.js",[],[],"D:\\Softserve\\digichlist-Admin-UI\\src\\features\\login\\admin\\AdminNavItem.tsx",["100","101"],"import React from 'react';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { NavLink } from 'react-router-dom';\n\nconst useStyles = makeStyles((theme) => ({\n    itemText: {\n        fontSize: '1rem',\n    },\n    active: {\n        color: 'white',\n        fontWeight: 500,\n        backgroundColor: theme.palette.primary.main,\n        '& svg': {\n            color: 'white',\n        },\n    },\n}));\n\nexport const MainListItems = ({ path, icon, title }) => {\n    const classes = useStyles();\n    return (\n        <ListItem component={NavLink} to={path} exact activeClassName={classes.active}>\n            <ListItemIcon>{icon}</ListItemIcon>\n            <ListItemText\n                disableTypography\n                className={classes.itemText}\n                color='primary'\n                primary={title}\n            />\n        </ListItem>\n    );\n};\n","D:\\Softserve\\digichlist-Admin-UI\\src\\environments\\environment.tsx",[],"D:\\Softserve\\digichlist-Admin-UI\\src\\features\\login\\admin\\nav.tsx",["102","103","104","105","106"],"import React from 'react';\nimport {\n    AccountBalance,\n    CollectionsBookmark,\n    Dashboard,\n    Dns,\n    Group,\n    InsertChartSharp,\n    SupervisedUserCircle,\n    List,\n} from '@material-ui/icons';\n\nexport const navList: any = [\n    {\n        path: '/admin/dashboard',\n        icon: <Dashboard />,\n        title: 'Головна',\n    },\n    {\n        path: '/admin/admins',\n        icon: <SupervisedUserCircle />,\n        title: 'Адміни',\n    },\n    {\n        path: '/admin/users',\n        icon: <Group />,\n        title: 'Користувачі',\n    },\n    {\n        path: '/admin/defects',\n        icon: <InsertChartSharp />,\n        title: 'Дефекти',\n    },\n];\n","D:\\Softserve\\digichlist-Admin-UI\\src\\features\\login\\Login.tsx",["107","108"],"D:\\Softserve\\digichlist-Admin-UI\\src\\common\\components\\Snackbar\\snackbar.js",["109","110"],"import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Alert from '@material-ui/lab/Alert';\r\n\r\nexport const messages = [];\r\n\r\nexport default function SnackbarHandler({ snack, setSnack }) {\r\n    const closeSnack = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setSnack({ open: false });\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={snack.open} autoHideDuration={3000} onClose={closeSnack}>\r\n            <Alert elevation={4} variant='filled' onClose={closeSnack} severity={snack.type}>\r\n                {snack.message}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","D:\\Softserve\\digichlist-Admin-UI\\src\\features\\login\\admin\\admins\\index.js",[],"D:\\Softserve\\digichlist-Admin-UI\\src\\features\\login\\admin\\admins\\Admins.tsx",["111","112","113","114"],"D:\\Softserve\\digichlist-Admin-UI\\src\\features\\login\\admin\\admins\\AdminsServise.ts",["115","116"],"D:\\Softserve\\digichlist-Admin-UI\\src\\common\\utils\\interceptor.ts",[],"D:\\Softserve\\digichlist-Admin-UI\\src\\features\\login\\admin\\admins\\AdminRow.tsx",["117","118","119","120"],{"ruleId":"121","severity":1,"message":"122","line":3,"column":25,"nodeType":"123","messageId":"124","endLine":3,"endColumn":57},{"ruleId":"121","severity":1,"message":"122","line":3,"column":24,"nodeType":"123","messageId":"124","endLine":3,"endColumn":82},{"ruleId":"121","severity":1,"message":"125","line":3,"column":25,"nodeType":"126","messageId":"127","endLine":3,"endColumn":78},{"ruleId":"128","severity":1,"message":"129","line":2,"column":10,"nodeType":"130","messageId":"131","endLine":2,"endColumn":14},{"ruleId":"128","severity":1,"message":"132","line":9,"column":8,"nodeType":"130","messageId":"131","endLine":9,"endColumn":16},{"ruleId":"128","severity":1,"message":"133","line":10,"column":8,"nodeType":"130","messageId":"131","endLine":10,"endColumn":20},{"ruleId":"128","severity":1,"message":"134","line":11,"column":8,"nodeType":"130","messageId":"131","endLine":11,"endColumn":20},{"ruleId":"128","severity":1,"message":"135","line":18,"column":10,"nodeType":"130","messageId":"131","endLine":18,"endColumn":17},{"ruleId":"128","severity":1,"message":"136","line":19,"column":16,"nodeType":"130","messageId":"131","endLine":19,"endColumn":22},{"ruleId":"121","severity":1,"message":"125","line":74,"column":21,"nodeType":"126","messageId":"127","endLine":74,"endColumn":36},{"ruleId":"128","severity":1,"message":"137","line":75,"column":11,"nodeType":"130","messageId":"131","endLine":75,"endColumn":26},{"ruleId":"121","severity":1,"message":"125","line":3,"column":21,"nodeType":"126","messageId":"127","endLine":3,"endColumn":74},{"ruleId":"121","severity":1,"message":"122","line":4,"column":26,"nodeType":"123","messageId":"124","endLine":4,"endColumn":40},{"ruleId":"121","severity":1,"message":"138","line":4,"column":32,"nodeType":"130","messageId":"139","endLine":4,"endColumn":36},{"ruleId":"121","severity":1,"message":"122","line":13,"column":27,"nodeType":"123","messageId":"124","endLine":13,"endColumn":32},{"ruleId":"121","severity":1,"message":"122","line":16,"column":29,"nodeType":"123","messageId":"124","endLine":16,"endColumn":34},{"ruleId":"121","severity":1,"message":"122","line":23,"column":30,"nodeType":"123","messageId":"124","endLine":23,"endColumn":56},{"ruleId":"121","severity":1,"message":"125","line":23,"column":31,"nodeType":"126","messageId":"127","endLine":23,"endColumn":52},{"ruleId":"128","severity":1,"message":"140","line":3,"column":5,"nodeType":"130","messageId":"131","endLine":3,"endColumn":19},{"ruleId":"128","severity":1,"message":"141","line":4,"column":5,"nodeType":"130","messageId":"131","endLine":4,"endColumn":24},{"ruleId":"128","severity":1,"message":"142","line":6,"column":5,"nodeType":"130","messageId":"131","endLine":6,"endColumn":8},{"ruleId":"128","severity":1,"message":"143","line":10,"column":5,"nodeType":"130","messageId":"131","endLine":10,"endColumn":9},{"ruleId":"144","severity":1,"message":"145","line":13,"column":23,"nodeType":"146","messageId":"147","endLine":13,"endColumn":26,"suggestions":"148"},{"ruleId":"128","severity":1,"message":"149","line":1,"column":17,"nodeType":"130","messageId":"131","endLine":1,"endColumn":26},{"ruleId":"121","severity":1,"message":"125","line":37,"column":16,"nodeType":"126","messageId":"127","endLine":37,"endColumn":31},{"ruleId":"121","severity":1,"message":"122","line":7,"column":16,"nodeType":"150","messageId":"124","endLine":7,"endColumn":61},{"ruleId":"121","severity":1,"message":"125","line":7,"column":41,"nodeType":"126","messageId":"127","endLine":7,"endColumn":60},{"ruleId":"128","severity":1,"message":"151","line":13,"column":8,"nodeType":"130","messageId":"131","endLine":13,"endColumn":18},{"ruleId":"121","severity":1,"message":"122","line":18,"column":23,"nodeType":"123","messageId":"124","endLine":18,"endColumn":28},{"ruleId":"128","severity":1,"message":"152","line":23,"column":12,"nodeType":"130","messageId":"131","endLine":23,"endColumn":17},{"ruleId":"128","severity":1,"message":"153","line":23,"column":19,"nodeType":"130","messageId":"131","endLine":23,"endColumn":27},{"ruleId":"128","severity":1,"message":"154","line":3,"column":8,"nodeType":"130","messageId":"131","endLine":3,"endColumn":13},{"ruleId":"121","severity":1,"message":"122","line":5,"column":26,"nodeType":"123","messageId":"124","endLine":5,"endColumn":36},{"ruleId":"121","severity":1,"message":"122","line":8,"column":18,"nodeType":"123","messageId":"124","endLine":11,"endColumn":6},{"ruleId":"121","severity":1,"message":"125","line":8,"column":19,"nodeType":"126","messageId":"127","endLine":11,"endColumn":2},{"ruleId":"128","severity":1,"message":"155","line":13,"column":10,"nodeType":"130","messageId":"131","endLine":13,"endColumn":14},{"ruleId":"128","severity":1,"message":"156","line":13,"column":16,"nodeType":"130","messageId":"131","endLine":13,"endColumn":23},"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","Object pattern argument should be typed.","ObjectPattern","missingArgTypeUnnamed","@typescript-eslint/no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'ListItem' is defined but never used.","'ListItemText' is defined but never used.","'ListItemIcon' is defined but never used.","'NavLink' is defined but never used.","'uuidv4' is defined but never used.","'dummyCategories' is assigned a value but never used.","Argument 'body' should be typed.","missingArgType","'AccountBalance' is defined but never used.","'CollectionsBookmark' is defined but never used.","'Dns' is defined but never used.","'List' is defined but never used.","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["157","158"],"'useEffect' is defined but never used.","FunctionDeclaration","'SearchIcon' is defined but never used.","'snack' is assigned a value but never used.","'setSnack' is assigned a value but never used.","'axios' is defined but never used.","'edit' is assigned a value but never used.","'setEdit' is assigned a value but never used.",{"messageId":"159","fix":"160","desc":"161"},{"messageId":"162","fix":"163","desc":"164"},"suggestUnknown",{"range":"165","text":"166"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"165","text":"167"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",[226,229],"unknown","never"]